# KickTalk - OpenTelemetry (Grafana Cloud) example environment file
# Copy this file to `.env` for local development or configure these in CI/CD for production.
# SECURITY: Do NOT commit real secrets. Keep .env in .gitignore (already present).
#
# Env naming rationale (electron-vite):
# - Sensitive values (endpoints, auth headers, deployment env, service name) use MAIN_VITE_* so they are scoped to the main process only.
#   In main, we map MAIN_VITE_* -> standard OTEL_* right before starting the NodeSDK.
# - Generic/non-sensitive OTEL knobs remain as OTEL_* to let the SDK consume them directly and to match standard OTEL documentation.

# electron-vite env scoping:
# - MAIN_VITE_* => available only to main process (preferred for telemetry secrets)
# - PRELOAD_VITE_* => preload only
# - RENDERER_VITE_* => renderer only
# - VITE_* => available to all (avoid for secrets)

# Service identity (main-only)
MAIN_VITE_OTEL_SERVICE_NAME=kicktalk
# Optional: additional resource attributes (comma-separated key=value)
# Common values: service.namespace, deployment.environment, service.version
# You may also set OTEL_RESOURCE_ATTRIBUTES directly if preferred.
# IMPORTANT: set service.version to tag all telemetry with your app version.
# In CI you can inject from package.json, e.g. service.version=$npm_package_version
OTEL_RESOURCE_ATTRIBUTES=service.namespace=kicktalk-org,deployment.environment=development,service.version=0.0.0-dev

# OTLP protocol
# http/protobuf is recommended for Grafana Cloud OTLP gateway
OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf

# OTLP unified endpoint (Grafana Cloud example; use your region)
# These MAIN_VITE_* are mapped to OTEL_* at runtime in main before NodeSDK starts.
MAIN_VITE_OTEL_EXPORTER_OTLP_ENDPOINT=https://otlp-gateway-prod-us-east-2.grafana.net/otlp

# Authorization header for Grafana Cloud (Basic base64(InstanceID:APITOKEN))
# IMPORTANT: Replace the placeholder with a real base64 string in your private .env or CI secrets
# Example generation (do not commit):
#   echo -n "123456:glc_...your_api_token..." | base64
MAIN_VITE_OTEL_EXPORTER_OTLP_HEADERS=Authorization=Basic REPLACE_WITH_BASE64_INSTANCEID_COLON_APITOKEN

# Enable trace and metric exporters (logs are off for now)
OTEL_TRACES_EXPORTER=otlp
OTEL_METRICS_EXPORTER=otlp
# OTEL_LOGS_EXPORTER=none

# Optional per-signal overrides (normally not needed if using OTEL_EXPORTER_OTLP_ENDPOINT)
# OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=https://otlp-gateway-prod-us-east-2.grafana.net/otlp/v1/traces
# OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=https://otlp-gateway-prod-us-east-2.grafana.net/otlp/v1/metrics
# OTEL_EXPORTER_OTLP_TRACES_HEADERS=Authorization=Basic REPLACE_WITH_BASE64_INSTANCEID_COLON_APITOKEN
# OTEL_EXPORTER_OTLP_METRICS_HEADERS=Authorization=Basic REPLACE_WITH_BASE64_INSTANCEID_COLON_APITOKEN

# Metric export interval (ms). Used by some exporters; default ~10000.
OTEL_METRIC_EXPORT_INTERVAL_MS=10000

# Diagnostics (optional)
# Valid levels: ALL, VERBOSE, DEBUG, INFO, WARN, ERROR, NONE
MAIN_VITE_OTEL_DIAG_LOG_LEVEL=INFO

# Deployment environment flags
# The app maps MAIN_VITE_OTEL_DEPLOYMENT_ENV => OTEL_DEPLOYMENT_ENV and into OTEL_RESOURCE_ATTRIBUTES.
NODE_ENV=development
MAIN_VITE_OTEL_DEPLOYMENT_ENV=development

# Dev-only Prometheus scrape (if you enable a Prometheus exporter in code)
# Set KT_ENABLE_PROMETHEUS=0 to disable a dev metrics endpoint (not enabled by default in NodeSDK bootstrap).
KT_ENABLE_PROMETHEUS=1
KT_PROM_PORT=9464
KT_PROM_PATH=/metrics

# Auto-instrumentations bootstrap for Node (optional)
# If you use Node 18+, you can export this; otherwise set it in your process manager/runner
# Example: export before running electron-vite/electron-builder
# NODE_OPTIONS=--require @opentelemetry/auto-instrumentations-node/register