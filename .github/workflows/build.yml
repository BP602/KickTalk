name: Build

on:
  push:
    tags:
      - 'v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - 'macos-latest' # for Arm based macs (M1 and above).
          - 'macos-13' # for Intel based macs.
          - 'ubuntu-24.04'
          - 'windows-latest'
        include:
          - platform: 'macos-latest'
            args: '--mac=dmg --arm64'
          - platform: 'macos-13'
            args: '--mac=dmg --x64'
          - platform: 'ubuntu-24.04'
            args: '--linux=AppImage'
          - platform: 'windows-latest'
            args: '--win'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Setup npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: npm install

      - name: Build application
        run: npm run build

      - name: Clean dist before packaging
        shell: bash
        run: rm -rf dist

      - name: Build Electron app
        shell: bash
        run: npm exec --yes electron-builder -- ${{ matrix.args }}
        env:
          # These are used for auto updates signing
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          # CSC_LINK: ${{ secrets.CSC_LINK }}
          # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # This is used for uploading release assets to github
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Avoid hardlink-related EEXIST issues on runners
          USE_HARD_LINKS: false
          
          # Grafana Cloud OTLP telemetry injection for production builds
          MAIN_VITE_OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.MAIN_VITE_OTEL_EXPORTER_OTLP_ENDPOINT }}
          MAIN_VITE_OTEL_EXPORTER_OTLP_HEADERS: ${{ secrets.MAIN_VITE_OTEL_EXPORTER_OTLP_HEADERS }}
          MAIN_VITE_OTEL_SERVICE_NAME: kicktalk
          
          # Production telemetry configuration
          OTEL_RESOURCE_ATTRIBUTES: deployment.environment=production,service.namespace=kicktalk,service.version=${{ github.ref_name }}
          OTEL_EXPORTER_OTLP_PROTOCOL: http/protobuf
          OTEL_NODE_RESOURCE_DETECTORS: env,host,os,serviceinstance
          MAIN_VITE_OTEL_DEPLOYMENT_ENV: production
          NODE_ENV: production
      - name: Upload artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            dist/*.exe
            dist/*.exe.blockmap
          retention-days: 7

      - name: Upload artifacts (macOS)
        if: contains(matrix.platform, 'macos')
        uses: actions/upload-artifact@v4
        with:
          name: macos-build-${{ matrix.platform }}
          path: |
            dist/*.dmg
            dist/*.dmg.blockmap
            dist/*.zip
            dist/*.zip.blockmap
          retention-days: 7

      - name: Upload artifacts (Linux)
        if: matrix.platform == 'ubuntu-24.04'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist/*.AppImage
          retention-days: 7

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate version match
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "Tag version: $TAG_VERSION"
          echo "Package version: $PACKAGE_VERSION"
          if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "Error: Tag version ($TAG_VERSION) does not match package.json version ($PACKAGE_VERSION)"
            exit 1
          fi
          echo "Version validation passed"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List files
        run: find artifacts -type f

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
