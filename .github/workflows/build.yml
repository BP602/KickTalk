name: Build

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        package-manager: [pnpm, npm]
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--mac --arm64 dmg'
          - platform: 'macos-13' # for Intel based macs.
            args: '--mac --x64 dmg'
          - platform: 'ubuntu-22.04'
            args: '--linux AppImage'
          - platform: 'windows-latest'
            args: '--win'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Install pnpm
        if: matrix.package-manager == 'pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        if: matrix.package-manager == 'pnpm'
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        if: matrix.package-manager == 'pnpm'
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup npm cache
        if: matrix.package-manager == 'npm'
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        shell: bash
        run: |
          if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
            pnpm install --frozen-lockfile
          else
            npm install
          fi

      - name: Build application
        run: ${{ matrix.package-manager }} run build

      - name: Build Electron app
        shell: bash
        run: |
          if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
            pnpm exec electron-builder ${{ matrix.args }}
          else
            npx electron-builder ${{ matrix.args }}
          fi
        env:
          # These are used for auto updates signing
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          # CSC_LINK: ${{ secrets.CSC_LINK }}
          # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # This is used for uploading release assets to github
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Rename artifacts with package manager suffix
        shell: bash
        run: |
          if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
            for file in dist/*; do
              if [[ -f "$file" ]]; then
                filename=$(basename "$file")
                if [[ "$filename" == *.exe.blockmap ]]; then
                  # Handle .exe.blockmap files
                  name="${filename%.exe.blockmap}"
                  mv "$file" "dist/${name}-${{ matrix.package-manager }}.exe.blockmap"
                elif [[ "$filename" == *.dmg.blockmap ]]; then
                  # Handle .dmg.blockmap files
                  name="${filename%.dmg.blockmap}"
                  mv "$file" "dist/${name}-${{ matrix.package-manager }}.dmg.blockmap"
                elif [[ "$filename" == *.zip.blockmap ]]; then
                  # Handle .zip.blockmap files
                  name="${filename%.zip.blockmap}"
                  mv "$file" "dist/${name}-${{ matrix.package-manager }}.zip.blockmap"
                else
                  # Handle regular files
                  extension="${filename##*.}"
                  name="${filename%.*}"
                  mv "$file" "dist/${name}-${{ matrix.package-manager }}.${extension}"
                fi
              fi
            done
          else
            echo "No files found in dist directory"
          fi

      - name: Upload artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-${{ matrix.package-manager }}
          path: |
            dist/*-${{ matrix.package-manager }}.exe
            dist/*-${{ matrix.package-manager }}.exe.blockmap
          retention-days: 7

      - name: Upload artifacts (macOS)
        if: contains(matrix.platform, 'macos')
        uses: actions/upload-artifact@v4
        with:
          name: macos-build-${{ matrix.package-manager }}-${{ matrix.platform }}
          path: |
            dist/*-${{ matrix.package-manager }}.dmg
            dist/*-${{ matrix.package-manager }}.dmg.blockmap
            dist/*-${{ matrix.package-manager }}.zip
            dist/*-${{ matrix.package-manager }}.zip.blockmap
          retention-days: 7

      - name: Upload artifacts (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build-${{ matrix.package-manager }}
          path: |
            dist/*-${{ matrix.package-manager }}.AppImage
            dist/*-${{ matrix.package-manager }}.dmg
            dist/*-${{ matrix.package-manager }}.dmg.blockmap
          retention-days: 7

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate version match
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "Tag version: $TAG_VERSION"
          echo "Package version: $PACKAGE_VERSION"
          if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "Error: Tag version ($TAG_VERSION) does not match package.json version ($PACKAGE_VERSION)"
            exit 1
          fi
          echo "Version validation passed"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List files
        run: find artifacts -type f

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
