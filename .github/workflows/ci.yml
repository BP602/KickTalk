name: CI

on:
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-test:
    strategy:
      matrix:
        node-version: [20, 22]
        package-manager: [pnpm, npm]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install pnpm
        if: matrix.package-manager == 'pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        if: matrix.package-manager == 'pnpm'
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        if: matrix.package-manager == 'pnpm'
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup npm cache
        if: matrix.package-manager == 'npm'
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        shell: bash
        run: |
          if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
            pnpm install --frozen-lockfile
          else
            npm install
          fi

      # - name: Run linter
      #   run: ${{ matrix.package-manager }} run lint

      - name: Build application
        run: ${{ matrix.package-manager }} run build

  test-builds:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        package-manager: [pnpm, npm]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        if: matrix.package-manager == 'pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        if: matrix.package-manager == 'pnpm'
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        if: matrix.package-manager == 'pnpm'
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup npm cache
        if: matrix.package-manager == 'npm'
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        shell: bash
        run: |
          if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
            pnpm install --frozen-lockfile
          else
            npm install
          fi

      - name: Build application
        run: ${{ matrix.package-manager }} run build

      - name: Build Electron app (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
            pnpm exec electron-builder --linux=AppImage --publish never
          else
            npm exec --yes electron-builder -- --linux=AppImage --publish never
          fi
        
      - name: Build Electron app (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
            pnpm exec electron-builder --win --publish never
          else
            npm exec --yes electron-builder -- --win --publish never
          fi

      - name: Build Electron app (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
            pnpm exec electron-builder --mac=dmg --publish never
          else
            npm exec --yes electron-builder -- --mac=dmg --publish never
          fi

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: latest-windows-${{ matrix.package-manager }}
          path: |
            dist/*.exe
            dist/*.exe.blockmap
          retention-days: 7

      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: latest-macos-${{ matrix.package-manager }}
          path: |
            dist/*.dmg
            dist/*.dmg.blockmap
            dist/*.zip
            dist/*.zip.blockmap
          retention-days: 7

      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: latest-linux-${{ matrix.package-manager }}
          path: dist/*.AppImage
          retention-days: 7